digraph "classes" {
rankdir=BT
charset="utf-8"
"src.Common.Species.BaseSpecie" [color="black", fontcolor="black", label=<{BaseSpecie|can_move<br ALIGN="LEFT"/>can_see<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>prey<br ALIGN="LEFT"/>|export_dict(): dict<br ALIGN="LEFT"/>identify_relationship(entity_specie: 'BaseSpecie'): SpecieRelationship<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.board.Board" [color="black", fontcolor="black", label=<{Board|all_entities<br ALIGN="LEFT"/>entity_registry : dict<br ALIGN="LEFT"/>entity_registry : dict[Entity, tuple[int, int]]<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>max_view_distance<br ALIGN="LEFT"/>max_x_coord<br ALIGN="LEFT"/>max_y_coord<br ALIGN="LEFT"/>num_entities<br ALIGN="LEFT"/>sub_grids : list<br ALIGN="LEFT"/>sub_grids : list[list[SubGrid]]<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|add_entity(entity: Entity, x: float, y: float): None<br ALIGN="LEFT"/>export_dict(): None<br ALIGN="LEFT"/>get_all_in_view(entity: Entity): dict[Entity, tuple[float, float]]<br ALIGN="LEFT"/>get_entities_nearby(entity: Entity): list[tuple[Entity, float, float]]<br ALIGN="LEFT"/>get_entity_location(entity: Entity): tuple[float, float]<br ALIGN="LEFT"/>get_grid(grid_x: int, grid_y: int): SubGrid<br ALIGN="LEFT"/>get_neighbour_grids(grid_x: int, grid_y: int): list[tuple[int, int]]<br ALIGN="LEFT"/>grid_from_entity_loc(entity_x: float, entity_y: float): tuple[int, int]<br ALIGN="LEFT"/>in_bounds(x: float, y: float): bool<br ALIGN="LEFT"/>iter_grids(): tuple[SubGrid, tuple[int, int]]<br ALIGN="LEFT"/>kill_entity(entity: Entity): tuple[float, float]<br ALIGN="LEFT"/>new_sub_grids(transfer_data: bool): None<br ALIGN="LEFT"/>set_entity_location(entity: Entity, x: float, y: float): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.LoggingHandler.LogTypes.Command" [color="black", fontcolor="black", label=<{Command|command_data : Optional[str]<br ALIGN="LEFT"/>command_data : str \| None<br ALIGN="LEFT"/>command_type<br ALIGN="LEFT"/>command_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.LoggingHandler.LogTypes.CommandType" [color="black", fontcolor="black", label=<{CommandType|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.Config.data.Config" [color="black", fontcolor="black", label=<{Config|Simulation<br ALIGN="LEFT"/>Simulation<br ALIGN="LEFT"/>|export(): dict<br ALIGN="LEFT"/>from_dict(obj: dict): 'Config'<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.entities.Entity" [color="black", fontcolor="black", label=<{Entity|can_move<br ALIGN="LEFT"/>can_see<br ALIGN="LEFT"/>day_born<br ALIGN="LEFT"/>eyes<br ALIGN="LEFT"/>eyes<br ALIGN="LEFT"/>genome<br ALIGN="LEFT"/>genome<br ALIGN="LEFT"/>is_alive<br ALIGN="LEFT"/>memory<br ALIGN="LEFT"/>memory<br ALIGN="LEFT"/>specie<br ALIGN="LEFT"/>specie<br ALIGN="LEFT"/>uuid<br ALIGN="LEFT"/>|age(current_day: int): int<br ALIGN="LEFT"/>do_action(cur_location: tuple[float, float], surroundings: dict['Entity', tuple[float, float]])<br ALIGN="LEFT"/>export_dict(): dict<br ALIGN="LEFT"/>identify_multiple_relationships(other_entities: list['Entity']): dict[Common.Species.SpecieRelationship, list['Entity']]<br ALIGN="LEFT"/>kill(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.board.EntityNotFoundError" [color="black", fontcolor="red", label=<{EntityNotFoundError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.Common.Genomes.Gender" [color="black", fontcolor="black", label=<{Gender|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.Common.Genomes.Gene" [color="black", fontcolor="black", label=<{Gene|mutability : float<br ALIGN="LEFT"/>mutability : float<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>uuid<br ALIGN="LEFT"/>value : float<br ALIGN="LEFT"/>value : float<br ALIGN="LEFT"/>|combine(other: 'Gene', do_mutate: bool, accuracy: int): 'Gene'<br ALIGN="LEFT"/>export_dict(): dict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.Common.Genomes.Genome" [color="black", fontcolor="black", label=<{Genome|gender<br ALIGN="LEFT"/>gender<br ALIGN="LEFT"/>gestation_period<br ALIGN="LEFT"/>gestation_period<br ALIGN="LEFT"/>hunger_rate<br ALIGN="LEFT"/>hunger_rate<br ALIGN="LEFT"/>max_hunger<br ALIGN="LEFT"/>max_hunger<br ALIGN="LEFT"/>speed<br ALIGN="LEFT"/>speed<br ALIGN="LEFT"/>uuid<br ALIGN="LEFT"/>vision_range<br ALIGN="LEFT"/>vision_range<br ALIGN="LEFT"/>|combine(other: 'Genome', do_mutate: bool, accuracy: int): 'Genome'<br ALIGN="LEFT"/>export_dict(): dict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.board.GridError" [color="black", fontcolor="red", label=<{GridError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.LoggingHandler.Handler" [color="black", fontcolor="black", label=<{Handler|current_logger : Logger \| None<br ALIGN="LEFT"/>current_logger : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.LoggingHandler.LogTypes.LogLevel" [color="black", fontcolor="black", label=<{LogLevel|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.LoggingHandler.Logger" [color="black", fontcolor="black", label=<{Logger|writer_thread : Thread<br ALIGN="LEFT"/>writer_thread : Thread<br ALIGN="LEFT"/>|change_output_dir(new_path: str | pathlib.Path): None<br ALIGN="LEFT"/>is_running(): bool<br ALIGN="LEFT"/>new_command(cmd: LogTypes.Command): None<br ALIGN="LEFT"/>new_message(message: LogTypes.Message): None<br ALIGN="LEFT"/>stop(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.Memory.LongTermMemory" [color="black", fontcolor="black", label=<{LongTermMemory|memory_length : float<br ALIGN="LEFT"/>memory_length : float<br ALIGN="LEFT"/>static_food_locations : list<br ALIGN="LEFT"/>static_food_locations : list[tuple[float, tuple[float, float]]]<br ALIGN="LEFT"/>|add_food(x: float, y: float, timestamp: float): None<br ALIGN="LEFT"/>export_dict(): dict<br ALIGN="LEFT"/>update(current_time: float): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.Memory.Memory" [color="black", fontcolor="black", label=<{Memory|current_time : float<br ALIGN="LEFT"/>current_time : float<br ALIGN="LEFT"/>long_term<br ALIGN="LEFT"/>long_term<br ALIGN="LEFT"/>short_term<br ALIGN="LEFT"/>short_term<br ALIGN="LEFT"/>|export_dict(): dict<br ALIGN="LEFT"/>remember_entity_location(entity_uuid: UUID, x: float, y: float): None<br ALIGN="LEFT"/>remember_food_location(x: float, y: float): None<br ALIGN="LEFT"/>update(current_time: float): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.LoggingHandler.LogTypes.Message" [color="black", fontcolor="black", label=<{Message|creation : datetime<br ALIGN="LEFT"/>creation : datetime<br ALIGN="LEFT"/>level<br ALIGN="LEFT"/>level<br ALIGN="LEFT"/>source<br ALIGN="LEFT"/>source : str<br ALIGN="LEFT"/>|get_data(): Any<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.Config.NoWritePermission" [color="black", fontcolor="red", label=<{NoWritePermission|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.LoggingHandler.LogTypes.ObservationPhaseMessage" [color="black", fontcolor="black", label=<{ObservationPhaseMessage|<br ALIGN="LEFT"/>|add_data(data): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.board.OutOfBoundsError" [color="black", fontcolor="red", label=<{OutOfBoundsError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.Config.ProjectConfigHandler" [color="black", fontcolor="black", label=<{ProjectConfigHandler|PROJECT_NAME : str<br ALIGN="LEFT"/>PROJECT_OWNER : str<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>config_file_path<br ALIGN="LEFT"/>config_file_path : Path<br ALIGN="LEFT"/>config_root : Path<br ALIGN="LEFT"/>config_root : Path, str<br ALIGN="LEFT"/>|create_default_config(config_path: pathlib.Path): None<br ALIGN="LEFT"/>export(): dict<br ALIGN="LEFT"/>get_config_dir(): pathlib.Path<br ALIGN="LEFT"/>integrity_check(): None<br ALIGN="LEFT"/>read_config(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.Memory.ShortTermMemory" [color="black", fontcolor="black", label=<{ShortTermMemory|entity_locations : dict<br ALIGN="LEFT"/>entity_locations : dict[UUID, tuple[float, tuple[float, float]]]<br ALIGN="LEFT"/>memory_length : float<br ALIGN="LEFT"/>memory_length : float<br ALIGN="LEFT"/>|add_entity(entity_uuid: UUID, x: float, y: float, timestamp: float): None<br ALIGN="LEFT"/>export_dict(): dict<br ALIGN="LEFT"/>get_entities(): list[tuple[UUID, tuple[float, float]]]<br ALIGN="LEFT"/>update(current_time): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.Simulation.Simulation" [color="black", fontcolor="black", label=<{Simulation|entity_board<br ALIGN="LEFT"/>entity_board<br ALIGN="LEFT"/>global_time : float<br ALIGN="LEFT"/>global_time : float<br ALIGN="LEFT"/>time_created : float<br ALIGN="LEFT"/>time_created : float<br ALIGN="LEFT"/>time_delta : float<br ALIGN="LEFT"/>time_delta : float<br ALIGN="LEFT"/>|adjust_time_delta(new_td: float): None<br ALIGN="LEFT"/>export_dict(): dict<br ALIGN="LEFT"/>step(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.Config.data.SimulationConfig" [color="black", fontcolor="black", label=<{SimulationConfig|max_agents : int<br ALIGN="LEFT"/>max_agents : int<br ALIGN="LEFT"/>num_steps : int<br ALIGN="LEFT"/>num_steps : int<br ALIGN="LEFT"/>start_agents : int<br ALIGN="LEFT"/>start_agents : int<br ALIGN="LEFT"/>time_delta : float<br ALIGN="LEFT"/>time_delta : float<br ALIGN="LEFT"/>|export(): dict<br ALIGN="LEFT"/>from_dict(obj: dict): 'SimulationConfig'<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.Common.Species.SpecieRelationship" [color="black", fontcolor="black", label=<{SpecieRelationship|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.Common.Rotation.StandardRotations" [color="black", fontcolor="black", label=<{StandardRotations|BEGIN : int<br ALIGN="LEFT"/>EAST : int<br ALIGN="LEFT"/>NORTH : float<br ALIGN="LEFT"/>SOUTH : float<br ALIGN="LEFT"/>WEST : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.board.SubGrid" [color="black", fontcolor="black", label=<{SubGrid|count<br ALIGN="LEFT"/>grid_entities : dict<br ALIGN="LEFT"/>grid_entities : dict[Entity, tuple[float, float]]<br ALIGN="LEFT"/>|change_entity_data(entity: Entity, x: float, y: float): None<br ALIGN="LEFT"/>get_all_entities(): list[tuple[Entity, float, float]]<br ALIGN="LEFT"/>get_entity_location(entity: Entity): tuple[float, float] | None<br ALIGN="LEFT"/>pop_entity(entity: Entity): tuple[float, float]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.vision.Vision" [color="black", fontcolor="black", label=<{Vision|view_distance<br ALIGN="LEFT"/>|abs_in_view(cur_coords: tuple[float, float], target_coords: tuple[float, float]): bool<br ALIGN="LEFT"/>dict_visible_entities(cur_coords: tuple[float, float], entities: dict): dict[Any, tuple[float, float]]<br ALIGN="LEFT"/>iter_visible_entities(cur_coords: tuple[float, float], entities: dict): Generator[tuple[Any, tuple[float, float]], None, None]<br ALIGN="LEFT"/>rel_in_view(target_coords: tuple[float, float]): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.LoggingHandler.LogTypes.ObservationPhaseMessage" -> "src.LoggingHandler.LogTypes.Message" [arrowhead="empty", arrowtail="none"];
"src.Common.Genomes.Gender" -> "src.Common.Genomes.Genome" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gender", style="solid"];
"src.Common.Genomes.Gene" -> "src.Common.Genomes.Genome" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="speed", style="solid"];
"src.Common.Genomes.Gene" -> "src.Common.Genomes.Genome" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hunger_rate", style="solid"];
"src.Common.Genomes.Gene" -> "src.Common.Genomes.Genome" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_hunger", style="solid"];
"src.Common.Genomes.Gene" -> "src.Common.Genomes.Genome" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="vision_range", style="solid"];
"src.Common.Genomes.Gene" -> "src.Common.Genomes.Genome" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gestation_period", style="solid"];
"src.Config.data.SimulationConfig" -> "src.Config.data.Config" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Simulation", style="solid"];
"src.LoggingHandler.LogTypes.CommandType" -> "src.LoggingHandler.LogTypes.Command" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="command_type", style="solid"];
"src.LoggingHandler.LogTypes.LogLevel" -> "src.LoggingHandler.LogTypes.Message" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="level", style="solid"];
"src.LoggingHandler.Logger" -> "src.LoggingHandler.Handler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="current_logger", style="solid"];
"src.Memory.LongTermMemory" -> "src.Memory.Memory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="long_term", style="solid"];
"src.Memory.LongTermMemory" -> "src.Memory.Memory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="long_term", style="solid"];
"src.Memory.ShortTermMemory" -> "src.Memory.Memory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="short_term", style="solid"];
"src.Memory.ShortTermMemory" -> "src.Memory.Memory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="short_term", style="solid"];
"src.Common.Genomes.Gender" -> "src.Common.Genomes.Genome" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="gender", style="solid"];
"src.Common.Genomes.Gene" -> "src.Common.Genomes.Genome" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="speed", style="solid"];
"src.Common.Genomes.Gene" -> "src.Common.Genomes.Genome" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="hunger_rate", style="solid"];
"src.Common.Genomes.Gene" -> "src.Common.Genomes.Genome" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="max_hunger", style="solid"];
"src.Common.Genomes.Gene" -> "src.Common.Genomes.Genome" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="vision_range", style="solid"];
"src.Common.Genomes.Gene" -> "src.Common.Genomes.Genome" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="gestation_period", style="solid"];
"src.Config.data.SimulationConfig" -> "src.Config.data.Config" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="Simulation", style="solid"];
"src.LoggingHandler.LogTypes.CommandType" -> "src.LoggingHandler.LogTypes.Command" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="command_type", style="solid"];
"src.LoggingHandler.LogTypes.LogLevel" -> "src.LoggingHandler.LogTypes.Message" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="level", style="solid"];
}
